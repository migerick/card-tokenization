// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file token.proto (package connectrpc.token.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message connectrpc.token.v1.TokenRequest
 */
export class TokenRequest extends Message<TokenRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string card_number = 2;
   */
  cardNumber = "";

  /**
   * @generated from field: string ccv = 3;
   */
  ccv = "";

  /**
   * @generated from field: string expiration_year = 4;
   */
  expirationYear = "";

  /**
   * @generated from field: string expiration_month = 5;
   */
  expirationMonth = "";

  constructor(data?: PartialMessage<TokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.token.v1.TokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "card_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ccv", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expiration_year", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "expiration_month", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenRequest {
    return new TokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenRequest {
    return new TokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenRequest {
    return new TokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TokenRequest | PlainMessage<TokenRequest> | undefined, b: TokenRequest | PlainMessage<TokenRequest> | undefined): boolean {
    return proto3.util.equals(TokenRequest, a, b);
  }
}

/**
 * @generated from message connectrpc.token.v1.TokenResponse
 */
export class TokenResponse extends Message<TokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<TokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.token.v1.TokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenResponse {
    return new TokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenResponse {
    return new TokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenResponse {
    return new TokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TokenResponse | PlainMessage<TokenResponse> | undefined, b: TokenResponse | PlainMessage<TokenResponse> | undefined): boolean {
    return proto3.util.equals(TokenResponse, a, b);
  }
}

/**
 * @generated from message connectrpc.token.v1.ChargeRequest
 */
export class ChargeRequest extends Message<ChargeRequest> {
  constructor(data?: PartialMessage<ChargeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.token.v1.ChargeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChargeRequest {
    return new ChargeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChargeRequest {
    return new ChargeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChargeRequest {
    return new ChargeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChargeRequest | PlainMessage<ChargeRequest> | undefined, b: ChargeRequest | PlainMessage<ChargeRequest> | undefined): boolean {
    return proto3.util.equals(ChargeRequest, a, b);
  }
}

/**
 * @generated from message connectrpc.token.v1.ChargeResponse
 */
export class ChargeResponse extends Message<ChargeResponse> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string card_number = 2;
   */
  cardNumber = "";

  /**
   * @generated from field: string expiration_year = 3;
   */
  expirationYear = "";

  /**
   * @generated from field: string expiration_month = 4;
   */
  expirationMonth = "";

  constructor(data?: PartialMessage<ChargeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.token.v1.ChargeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "card_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiration_year", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expiration_month", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChargeResponse {
    return new ChargeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChargeResponse {
    return new ChargeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChargeResponse {
    return new ChargeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChargeResponse | PlainMessage<ChargeResponse> | undefined, b: ChargeResponse | PlainMessage<ChargeResponse> | undefined): boolean {
    return proto3.util.equals(ChargeResponse, a, b);
  }
}

